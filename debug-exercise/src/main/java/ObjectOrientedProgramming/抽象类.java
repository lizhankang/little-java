package ObjectOrientedProgramming;

public class 抽象类 {
}

/**
 * 如果一个class定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用abstract修饰。
 * 因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。
 * 因为抽象类无法被直接实例化，本身被设计成只能用于被继承，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，抽象方法实际上相当于定义了“规范”。
 * 面向抽象编程的本质就是：
 *      上层代码只定义规范
 *      不需要子类就可以实现业务逻辑（正常编译）；
 *      具体的业务逻辑由不同的子类实现，调用者并不关心。
 * 在抽象类中，抽象方法本质上是定义接口规范：即规定高层类的接口，从而保证所有子类都有相同的接口实现，这样，多态就能发挥出威力。
 */